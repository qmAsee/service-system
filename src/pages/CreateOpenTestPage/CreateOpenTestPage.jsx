import React, { useState, useEffect, useCallback } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { Link, useParams, useNavigate } from 'react-router-dom';
import { Button, Modal, message } from 'antd';
import { MoveRight, Plus } from "lucide-react";

import { CustomBreadcrumb } from '../../components/CustomBreadcrumb/CustomBreadcrumb';
import { CreateCourseHead } from '../../components/CreateCourseHead/CreateCourseHead';
import { QuestionList } from '../../components/QuestionList/QuestionList';
import { QuestionPopup } from '../../components/QuestionPopup/QuestionPopup';
import { updateCourse } from '@/store/slices/courseSlice';
import styles from './CreateOpenTestPage.module.scss';

const initialQuestionState = {
  correctAnswers: '',
  correctAnswersCount: 1,
  hint: '',
  id: Date.now(),
  image: null,
  question: '',
  totalTime: 30,
  type: 'open',
};

export const CreateOpenTestPage = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const courses = useSelector(state => state.courses.courses);
  const { courseId } = useParams();
  
  const currentCourse = courses.find(course => course.id === courseId);
  
  const [test, setTest] = useState({
    id: Date.now().toString(),
    title: '',
    description: '',
    isPublished: false,
    questions: []
  });
  console.log()
  const [isPopupOpen, setIsPopupOpen] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState(initialQuestionState);
  const [editingQuestionId, setEditingQuestionId] = useState(null);
  const [isConfirmModalVisible, setIsConfirmModalVisible] = useState(false);
  const [questionToDelete, setQuestionToDelete] = useState(null);

  // Handlers for test metadata
  const handleTitleChange = useCallback((title) => {
    setTest(prev => ({ ...prev, title }));
  }, []);

  const handleDescriptionChange = useCallback((description) => {
    setTest(prev => ({ ...prev, description }));
  }, []);

  const handlePublishChange = useCallback((isPublished) => {
    setTest(prev => ({ ...prev, isPublished }));
  }, []);

  // Question management functions
  const openAddQuestionPopup = () => {
    setCurrentQuestion(initialQuestionState);
    setEditingQuestionId(null);
    setIsPopupOpen(true);
  };

  const openEditQuestionPopup = (questionId) => {
    const questionToEdit = test.questions.find(q => q.id === questionId);
    if (questionToEdit) {
      setCurrentQuestion(questionToEdit);
      setEditingQuestionId(questionId);
      setIsPopupOpen(true);
    }
  };

  const saveQuestion = (newQuestion, isEditing, addAnother = false) => {
    // Создаем копию вопроса перед сохранением
    const questionToSave = JSON.parse(JSON.stringify(newQuestion));
    
    setTest(prev => {
      if (isEditing) {
        const updatedQuestions = prev.questions.map(q => 
          q.id === editingQuestionId ? questionToSave : q
        );
        return { ...prev, questions: updatedQuestions };
      } else {
        return { 
          ...prev, 
          questions: [...prev.questions, questionToSave] 
        };
      }
    });

    if (addAnother) {
      setCurrentQuestion(initialQuestionState);
      setEditingQuestionId(null);
    } else {
      closePopup();
    }
  };

  const confirmDeleteQuestion = (questionId) => {
    setQuestionToDelete(questionId);
    setIsConfirmModalVisible(true);
  };

  const deleteQuestion = () => {
    if (questionToDelete) {
      setTest(prev => ({
        ...prev,
        questions: prev.questions.filter(q => q.id !== questionToDelete)
      }));
      setIsConfirmModalVisible(false);
      message.success('Вопрос удален');
    }
  };

  const closePopup = () => {
    setIsPopupOpen(false);
    setCurrentQuestion(initialQuestionState);
    setEditingQuestionId(null);
  };

  // Submit test
  const handleSubmitTest = () => {
    if (test.questions.length === 0) {
      message.warning('Добавьте хотя бы один вопрос');
      return;
    }

    if (!test.title.trim()) {
      message.warning('Введите название теста');
      return;
    }

    if (!currentCourse) {
      message.error(`Курс с id ${courseId} не найден`);
      return;
    }

    const updatedCourse = {
      ...currentCourse,
      tests: [
        ...(currentCourse.tests || []),
        test
      ]
    };

    dispatch(updateCourse(updatedCourse));
    navigate(`/courses/${courseId}`);
  };

  return (
    <>
      <CustomBreadcrumb
        items={[
          { title: <Link to="/dashboard">Главная</Link> },
          { title: <Link to="/courses">Учебные курсы</Link> },
          { title: <Link to={`/courses/${courseId}`}>Редактирование курса</Link> },
          {title: 'Создание теста'}
        ]}
        separator={<MoveRight size={14} />} 
      />

      <QuestionPopup 
        isOpen={isPopupOpen}
        onClose={closePopup}
        question={currentQuestion}
        isEditing={editingQuestionId}
        onSave={saveQuestion}
        setQuestion={setCurrentQuestion}
        isOpenQuestion={true} // This indicates it's an open question
      />

      <Modal
        title="Подтверждение удаления"
        visible={isConfirmModalVisible}
        onOk={deleteQuestion}
        onCancel={() => setIsConfirmModalVisible(false)}
        okText="Удалить"
        cancelText="Отмена"
      >
        <p>Вы уверены, что хотите удалить этот вопрос?</p>
      </Modal>

      <section className={styles.create_test}>
        <CreateCourseHead
          placeholder="Название теста"
          value={test.title}
          onChange={handleTitleChange}
          publishStatus={test.isPublished}
          onPublishChange={handlePublishChange}
          description={test.description}
          onDescriptionChange={handleDescriptionChange}
        />
        
        <div className={styles.create_test_add_question}>
          <Button
            type="primary"
            icon={<Plus size={16} />}
            onClick={openAddQuestionPopup}
          >
            Добавить вопрос
          </Button>
        </div>

        <QuestionList
          questions={test.questions}
          onEdit={openEditQuestionPopup}
          onDelete={confirmDeleteQuestion}
          onAddQuestion={openAddQuestionPopup}
          isOpenQuestionType={false}
        />
        <div className={styles.create_test_actions}>
          <Button
            type="primary"
            onClick={handleSubmitTest}
            disabled={test.questions.length === 0}
            size="large"
          >
            Сохранить тест
          </Button>
          <Button
            onClick={() => navigate(`/courses/${courseId}`)}
            style={{ marginLeft: 16 }}
            size="large"
          >
            Отмена
          </Button>
        </div>
      </section>
    </>
  );
};