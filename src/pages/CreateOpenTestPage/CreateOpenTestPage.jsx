import React, { useState, useEffect } from 'react';
import styles from './CreateOpenTestPage.module.scss';
import { CreateCourseHead } from '../../components/CreateCourseHead/CreateCourseHead';
import { CreateAttachImg } from '../../components/CreateAttachImg/CreateAttachImg';
import { TimeRespond } from '../../components/TimeRespond/TimeRespond';
import { Plus } from "lucide-react";

export const CreateOpenTestPage = () => {
  // Состояние теста с массивом блоков
  const [test, setTest] = useState({
    id: 1, // ID теста
    title: '',
    isPublished: false,
    blocks: [] // Массив блоков (каждый блок содержит вопрос)
  });
  console.log(test)
  // Состояние для управления попапом
  const [isPopupOpen, setIsPopupOpen] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState({
    text: '',
    image: null,
    time: 30,
    comment: ''
  });

  // Обработчики для заголовка и публикации
  const handleTitleChange = (title) => {
    setTest(prev => ({ ...prev, title }));
  };

  const handlePublishChange = (isPublished) => {
    setTest(prev => ({ ...prev, isPublished }));
  };

  // Обработчики полей вопроса
  const handleQuestionChange = (e) => {
    setCurrentQuestion(prev => ({ ...prev, text: e.target.value }));
  };

  const handleCommentChange = (e) => {
    setCurrentQuestion(prev => ({ ...prev, comment: e.target.value }));
  };

  const handleTimeChange = (time) => {
    setCurrentQuestion(prev => ({ ...prev, time }));
  };

  const handleImageUpload = (image) => {
    setCurrentQuestion(prev => ({ ...prev, image }));
  };

  // Добавление нового блока с вопросом
  const addQuestion = (addAnother = false) => {
    if (!currentQuestion.text.trim()) return;
    
    const newBlock = {
      id: Date.now(), // Уникальный ID для блока
      question: { ...currentQuestion }, // Вопрос без дублирования ID
      totalTime: currentQuestion.time
    };

    setTest(prev => ({
      ...prev,
      blocks: [...prev.blocks, newBlock]
    }));
    
    if (addAnother) {
      setCurrentQuestion({
        text: '',
        image: null,
        time: 30,
        comment: ''
      });
    } else {
      closePopup();
    }
  };

  // Управление попапом
  const closePopup = () => {
    setIsPopupOpen(false);
    setCurrentQuestion({
      text: '',
      image: null,
      time: 30,
      comment: ''
    });
  };

  const handleOverlayClick = (e) => {
    if (e.target === e.currentTarget) {
      closePopup();
    }
  };

  useEffect(() => {
    document.body.style.overflow = isPopupOpen ? 'hidden' : '';
    return () => {
      document.body.style.overflow = '';
    };
  }, [isPopupOpen]);

  return (
    <>
      {/* Попап добавления вопроса */}
      {isPopupOpen && (
        <div className={styles.popup_overlay} onClick={handleOverlayClick}>
          <div className={styles.popup_content}>
            <h2>Добавить вопрос</h2>
            
            <div className={styles.popup_question}>
              <h3 className={styles.popup_content_title}>Вопрос</h3>
              <textarea 
                value={currentQuestion.text}
                onChange={handleQuestionChange}
                placeholder='Напишите вопрос' 
              />
            </div>
            
            <div className={styles.popup_image}>
              <h3 className={styles.popup_content_title}>Изображение</h3>
              <CreateAttachImg 
                onImageUpload={handleImageUpload} 
                currentImage={currentQuestion.image}
              />
            </div>
            
            <div className={styles.popup_time}>
              <TimeRespond 
                initialTime={currentQuestion.time} 
                onTimeChange={handleTimeChange}
              />
            </div>
            
            <div className={styles.popup_comment}>
              <h3 className={styles.popup_content_title}>Комментарий</h3>
              <textarea 
                value={currentQuestion.comment}
                onChange={handleCommentChange}
                placeholder='Оставьте подсказку для тестируемых, где искать правильный ответ' 
              />
            </div>
            
            <div className={styles.popup_btn}>
              <button 
                className={styles.popup_btn_close} 
                onClick={closePopup}
              >
                Отмена
              </button>
              
              <div className={styles.popup_btn_add}>
                <button onClick={() => addQuestion(false)}>Добавить</button>
                <button onClick={() => addQuestion(true)}>Добавить и создать еще один</button>
              </div>  
            </div>
          </div>
        </div>
      )}
      
      {/* Основной интерфейс */}
      <section className={styles.create_test}>
        <CreateCourseHead 
          placeholder="Название теста" 
          value={test.title}
          onChange={handleTitleChange}
          publishStatus={test.isPublished}
          onPublishChange={handlePublishChange}
        />
        
        <div className={styles.create_test_add_question}>
          <button
            className={styles.create_test_add_question_btn}
            onClick={() => setIsPopupOpen(true)}
          >
            <Plus className="w-5 h-5" />
            Добавить вопрос
          </button>
        </div>
        
        {/* Список добавленных блоков с вопросами */}
        <div className={styles.questions_list}>
          {test.blocks.length > 0 ? (
            test.blocks.map((block, index) => (
              <div key={block.id} className={styles.question_item}>
                <h3>Вопрос {index + 1} </h3>
                <p>{block.question.text}</p>
                {block.question.image && (
                  <div className={styles.question_image}>
                    <img src={URL.createObjectURL(block.question.image)} alt="Вопрос" />
                  </div>
                )}
                <p>Время: {block.question.time} сек.</p>
                {block.question.comment && <p>Комментарий: {block.question.comment}</p>}
              </div>
            ))
          ) : (
            <div 
              className={styles.create_test_add_question_block}
              onClick={() => setIsPopupOpen(true)}
            >
              <span>Добавьте вопросы</span>
            </div>
          )}
        </div>
      </section>
    </>
  );
};