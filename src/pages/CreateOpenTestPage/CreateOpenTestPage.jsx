import React, { useState, useEffect } from 'react';
import styles from './CreateOpenTestPage.module.scss';

import { CustomBreadcrumb } from '../../components/CustomBreadcrumb/CustomBreadcrumb';
import { CreateCourseHead } from '../../components/CreateCourseHead/CreateCourseHead';
import { CreateAttachImg } from '../../components/CreateAttachImg/CreateAttachImg';
import { TimeRespond } from '../../components/TimeRespond/TimeRespond';
import { Plus, MoveRight } from "lucide-react";
import { Link, useParams } from 'react-router-dom';

export const CreateOpenTestPage = () => {
  const { courseId } = useParams();
  // Состояние курса с массивом тестов
  const [course, setCourse] = useState({
    // другие поля курса...
    tests: [
      {
        id: Date.now().toString(),
        title: '',
        description: '',
        isPublished: false,
        questions: []
      }
    ]
  });
  console.log(course)
  // Индекс текущего теста (если их несколько)
  const [currentTestIndex] = useState(0);
  const currentTest = course.tests[currentTestIndex];

  // Состояние для управления попапом
  const [isPopupOpen, setIsPopupOpen] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState({
    id: Date.now(),
    text: '',
    image: null,
    totalTime: 30, // Заменили time на totalTime
    comment: ''
  });

  // Обработчики для заголовка, описания и публикации
  const handleTitleChange = (title) => {
    setCourse(prev => {
      const newTests = [...prev.tests];
      newTests[currentTestIndex] = { ...newTests[currentTestIndex], title };
      return { ...prev, tests: newTests };
    });
  };

  const handleDescriptionChange = (description) => {
    setCourse(prev => {
      const newTests = [...prev.tests];
      newTests[currentTestIndex] = { ...newTests[currentTestIndex], description };
      return { ...prev, tests: newTests };
    });
  };

  const handlePublishChange = (isPublished) => {
    setCourse(prev => {
      const newTests = [...prev.tests];
      newTests[currentTestIndex] = { ...newTests[currentTestIndex], isPublished };
      return { ...prev, tests: newTests };
    });
  };

  // Обработчики полей вопроса
  const handleQuestionChange = (e) => {
    setCurrentQuestion(prev => ({ ...prev, text: e.target.value }));
  };

  const handleCommentChange = (e) => {
    setCurrentQuestion(prev => ({ ...prev, comment: e.target.value }));
  };

  const handleTimeChange = (totalTime) => {
    setCurrentQuestion(prev => ({ ...prev, totalTime }));
  };

  const handleImageUpload = (image) => {
    setCurrentQuestion(prev => ({ ...prev, image }));
  };

  // Добавление нового вопроса
  const addQuestion = (addAnother = false) => {
    if (!currentQuestion.text.trim()) return;

    const newQuestion = {
      ...currentQuestion,
      totalTime: currentQuestion.totalTime
    };

    setCourse(prev => {
      const newTests = [...prev.tests];
      newTests[currentTestIndex] = {
        ...newTests[currentTestIndex],
        questions: [...newTests[currentTestIndex].questions, newQuestion]
      };
      return { ...prev, tests: newTests };
    });

    if (addAnother) {
      setCurrentQuestion({
        id: Date.now(),
        text: '',
        image: null,
        totalTime: 30,
        comment: ''
      });
    } else {
      closePopup();
    }
  };

  // Управление попапом
  const closePopup = () => {
    setIsPopupOpen(false);
    setCurrentQuestion({
      id: Date.now(),
      text: '',
      image: null,
      totalTime: 30,
      comment: ''
    });
  };

  const handleOverlayClick = (e) => {
    if (e.target === e.currentTarget) {
      closePopup();
    }
  };

  useEffect(() => {
    document.body.style.overflow = isPopupOpen ? 'hidden' : '';
    return () => {
      document.body.style.overflow = '';
    };
  }, [isPopupOpen]);

  return (
    <>
      <CustomBreadcrumb
        items={[
          { title: <Link to="/dashboard">Главная</Link> },
          { title: <Link to="/courses">Учебные курсы</Link> },
          { title: <Link to={`/courses/${courseId}`}>Редактирование курса</Link> },
          { title: 'Создание теста', }
        ]}
        separator={<MoveRight size={14} />} />
      {/* Попап добавления вопроса */}
      {isPopupOpen && (
        <div className={styles.popup_overlay} onClick={handleOverlayClick}>
          <div className={styles.popup_content}>
            <h2>Добавить вопрос</h2>
            <div className={styles.popup_question}>
              <h3 className={styles.popup_content_title}>Вопрос</h3>
              <textarea
                value={currentQuestion.text}
                onChange={handleQuestionChange}
                placeholder='Напишите вопрос'
              />
            </div>

            <div className={styles.popup_image}>
              <h3 className={styles.popup_content_title}>Изображение</h3>
              <CreateAttachImg
                onImageUpload={handleImageUpload}
                currentImage={currentQuestion.image}
              />
            </div>

            <div className={styles.popup_time}>
              <TimeRespond
                initialTime={currentQuestion.totalTime}
                onTimeChange={handleTimeChange}
              />
            </div>

            <div className={styles.popup_comment}>
              <h3 className={styles.popup_content_title}>Комментарий</h3>
              <textarea
                value={currentQuestion.comment}
                onChange={handleCommentChange}
                placeholder='Оставьте подсказку для тестируемых, где искать правильный ответ'
              />
            </div>

            <div className={styles.popup_btn}>
              <button
                className={styles.popup_btn_close}
                onClick={closePopup}
              >
                Отмена
              </button>

              <div className={styles.popup_btn_add}>
                <button onClick={() => addQuestion(false)}>Добавить</button>
                <button onClick={() => addQuestion(true)}>Добавить и создать еще один</button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Основной интерфейс */}
      <section className={styles.create_test}>
        <CreateCourseHead
          placeholder="Название теста"
          value={currentTest.title}
          onChange={handleTitleChange}
          publishStatus={currentTest.isPublished}
          onPublishChange={handlePublishChange}
        />
        <div className={styles.create_test_add_question}>
          <button
            className={styles.create_test_add_question_btn}
            onClick={() => setIsPopupOpen(true)}
          >
            <Plus className="w-5 h-5" />
            Добавить вопрос
          </button>
        </div>

        {/* Список добавленных вопросов */}
        <div className={styles.questions_list}>
          {currentTest.questions.length > 0 ? (
            currentTest.questions.map((question, index) => (
              <div key={question.id} className={styles.question_item}>
                <h3>Вопрос {index + 1} </h3>
                <p>{question.text}</p>
                {question.image && (
                  <div className={styles.question_image}>
                    <img src={URL.createObjectURL(question.image)} alt="Вопрос" />
                  </div>
                )}
                <p>Время: {question.totalTime} сек.</p>
                {question.comment && <p>Комментарий: {question.comment}</p>}
              </div>
            ))
          ) : (
            <div
              className={styles.create_test_add_question_block}
              onClick={() => setIsPopupOpen(true)}
            >
              <span>Добавьте вопросы</span>
            </div>
          )}
        </div>
      </section>
    </>
  );
};